Given the head of a singly linked list, return true if it is a palindrome.

 

Example 1:


Input: head = [1,2,2,1]
Output: true
Example 2:


Input: head = [1,2]
Output: false
 

Constraints:

The number of nodes in the list is in the range [1, 105].
0 <= Node.val <= 9
 

Follow up: Could you do it in O(n) time and O(1) space?

//cpp my solution using stack

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        int len=0;
        
        ListNode* pnode=head;
        
        while(pnode){
            len++;
            pnode = pnode->next;
        }
        
        stack<int> st;
        pnode=head;
        
        bool isodd = len % 2;
        bool once=true;
        
        int tmp=1;
        
        while(tmp<=len){
            if(tmp<=(len/2)){
                st.push(pnode->val);
            }else{
                if(isodd && once){
                    once=false;    
                }else{
                    int eq = st.top();
                    st.pop();

                    if(eq != pnode->val)
                        return false;
                }
            }
            
            pnode = pnode->next;
            tmp++;
        }
        
        return true;
    }
};
