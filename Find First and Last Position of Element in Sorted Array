Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

Follow up: Could you write an algorithm with O(log n) runtime complexity?

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums is a non-decreasing array.
-109 <= target <= 109

//cpp My solution my not O(logn)

class Solution {
public:
    vector<int> searchRange(vector<int>& n, int t) {
        int sz = n.size();
        int l=0,r=sz-1;
        
        int f=-1;
        
        while(l<=r){
            int mid = (l+r)/2;
            
            if(n[mid] == t){
                f=mid;
                break;
            }else if(n[mid]<t){
                l=mid+1;
            }else{
                r=mid-1;
            }
        }
        
        if(f==-1)   return {-1,-1};
        
        int a,b;
        a=b=f;
        
        while(a>=0 && n[a]==t)  a--;
        a=a+1;
        
        while(b<sz && n[b]==t)  b++;
        b=b-1;
        
        return {a,b};
    }
};
